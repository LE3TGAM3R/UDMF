/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'SELACO.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct HWND__;
struct tagRAWINPUTDEVICE;
struct _devicemodeW;
struct tagWNDCLASSW;
struct HINSTANCE__;
struct HICON__;
struct HBRUSH__;
struct tagLOGFONTW;
union _LARGE_INTEGER;
struct tagBITMAPINFO;
struct _ICONINFO;
struct HBITMAP__;
struct tagPIXELFORMATDESCRIPTOR;
struct HDC__;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _EXCEPTION_RECORD;
struct $442A5DF3ADBDBBE6D50BB06724F3065D;
struct _s_ThrowInfo;

/* 1 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 2 */
typedef struct _GUID GUID;

/* 3 */
struct RUNTIME_FUNCTION
{
  void *__ptr32 FunctionStart;
  void *__ptr32 FunctionEnd;
  void *__ptr32 UnwindInfo;
};

/* 4 */
struct UNWIND_INFO_HDR
{
  char Ver3_Flags;
  char PrologSize;
  char CntUnwindCodes;
  char FrReg_FrRegOff;
};

/* 5 */
struct UNWIND_CODE
{
  char PrologOff;
  char OpCode_OpInfo;
};

/* 6 */
struct FuncInfo
{
  int magicNumber;
  int maxState;
  void *__ptr32 pUnwindMap;
  int nTryBlocks;
  void *__ptr32 pTryBlockMap;
  int nIPMapEntries;
  void *__ptr32 pIPtoStateMap;
  int dispUnwindHelp;
  void *__ptr32 pESTypeList;
  int EHFlags;
};

/* 7 */
struct IPtoStateMap
{
  void *__ptr32 pc;
  int state;
};

/* 8 */
struct UnwindMapEntry
{
  int toState;
  void *__ptr32 action;
};

/* 9 */
enum __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 10 */
enum __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 12 */
typedef HWND__ *HWND;

/* 14 */
typedef unsigned int UINT;

/* 16 */
typedef unsigned __int64 UINT_PTR;

/* 15 */
typedef UINT_PTR WPARAM;

/* 18 */
typedef __int64 LONG_PTR;

/* 17 */
typedef LONG_PTR LPARAM;

/* 19 */
typedef unsigned int DWORD;

/* 22 */
typedef int LONG;

/* 21 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 20 */
typedef tagPOINT POINT;

/* 11 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 13 */
struct HWND__
{
  int unused;
};

/* 23 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 24 */
typedef tagRAWINPUTDEVICE RAWINPUTDEVICE;

/* 26 */
typedef unsigned __int16 USHORT;

/* 25 */
struct tagRAWINPUTDEVICE
{
  USHORT usUsagePage;
  USHORT usUsage;
  DWORD dwFlags;
  HWND hwndTarget;
};

/* 29 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 28 */
typedef _FILETIME FILETIME;

/* 27 */
struct _BY_HANDLE_FILE_INFORMATION
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
};

/* 30 */
#pragma pack(push, 1)
struct timecaps_tag
{
  UINT wPeriodMin;
  UINT wPeriodMax;
};
#pragma pack(pop)

/* 31 */
typedef _devicemodeW DEVMODEW;

/* 34 */
typedef unsigned __int16 wchar_t;

/* 33 */
typedef wchar_t WCHAR;

/* 35 */
typedef unsigned __int16 WORD;

/* 37 */
struct _devicemodeW::$5A39A2C3BB0B1D2D5888DFEE2BA0B23C::$A4EE175A7532F35C00DA5CAD042934DF
{
  __int16 dmOrientation;
  __int16 dmPaperSize;
  __int16 dmPaperLength;
  __int16 dmPaperWidth;
  __int16 dmScale;
  __int16 dmCopies;
  __int16 dmDefaultSource;
  __int16 dmPrintQuality;
};

/* 40 */
struct _POINTL
{
  LONG x;
  LONG y;
};

/* 39 */
typedef _POINTL POINTL;

/* 38 */
struct _devicemodeW::$5A39A2C3BB0B1D2D5888DFEE2BA0B23C::$604F2BC6924E02F5722A52FC79BC44F9
{
  POINTL dmPosition;
  DWORD dmDisplayOrientation;
  DWORD dmDisplayFixedOutput;
};

/* 36 */
union _devicemodeW::$5A39A2C3BB0B1D2D5888DFEE2BA0B23C
{
  struct
  {
    __int16 dmOrientation;
    __int16 dmPaperSize;
    __int16 dmPaperLength;
    __int16 dmPaperWidth;
    __int16 dmScale;
    __int16 dmCopies;
    __int16 dmDefaultSource;
    __int16 dmPrintQuality;
  };
  struct
  {
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
  };
};

/* 41 */
union _devicemodeW::$4FBEBCCE69364E072421C9DF045BB77C
{
  DWORD dmDisplayFlags;
  DWORD dmNup;
};

/* 32 */
struct _devicemodeW
{
  WCHAR dmDeviceName[32];
  WORD dmSpecVersion;
  WORD dmDriverVersion;
  WORD dmSize;
  WORD dmDriverExtra;
  DWORD dmFields;
  union
  {
    struct
    {
      __int16 dmOrientation;
      __int16 dmPaperSize;
      __int16 dmPaperLength;
      __int16 dmPaperWidth;
      __int16 dmScale;
      __int16 dmCopies;
      __int16 dmDefaultSource;
      __int16 dmPrintQuality;
    };
    struct
    {
      POINTL dmPosition;
      DWORD dmDisplayOrientation;
      DWORD dmDisplayFixedOutput;
    };
  };
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  WCHAR dmFormName[32];
  WORD dmLogPixels;
  DWORD dmBitsPerPel;
  DWORD dmPelsWidth;
  DWORD dmPelsHeight;
  union
  {
    DWORD dmDisplayFlags;
    DWORD dmNup;
  };
  DWORD dmDisplayFrequency;
  DWORD dmICMMethod;
  DWORD dmICMIntent;
  DWORD dmMediaType;
  DWORD dmDitherType;
  DWORD dmReserved1;
  DWORD dmReserved2;
  DWORD dmPanningWidth;
  DWORD dmPanningHeight;
};

/* 43 */
typedef unsigned __int64 DWORD64;

/* 48 */
typedef unsigned __int8 BYTE;

/* 51 */
typedef unsigned __int64 ULONGLONG;

/* 52 */
typedef __int64 LONGLONG;

/* 50 */
struct __declspec(align(16)) _M128A
{
  ULONGLONG Low;
  LONGLONG High;
};

/* 49 */
typedef _M128A M128A;

/* 47 */
struct __declspec(align(16)) _XSAVE_FORMAT
{
  WORD ControlWord;
  WORD StatusWord;
  BYTE TagWord;
  BYTE Reserved1;
  WORD ErrorOpcode;
  DWORD ErrorOffset;
  WORD ErrorSelector;
  WORD Reserved2;
  DWORD DataOffset;
  WORD DataSelector;
  WORD Reserved3;
  DWORD MxCsr;
  DWORD MxCsr_Mask;
  M128A FloatRegisters[8];
  M128A XmmRegisters[16];
  BYTE Reserved4[96];
};

/* 46 */
typedef _XSAVE_FORMAT XSAVE_FORMAT;

/* 45 */
typedef XSAVE_FORMAT XMM_SAVE_AREA32;

/* 53 */
struct _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414
{
  M128A Header[2];
  M128A Legacy[8];
  M128A Xmm0;
  M128A Xmm1;
  M128A Xmm2;
  M128A Xmm3;
  M128A Xmm4;
  M128A Xmm5;
  M128A Xmm6;
  M128A Xmm7;
  M128A Xmm8;
  M128A Xmm9;
  M128A Xmm10;
  M128A Xmm11;
  M128A Xmm12;
  M128A Xmm13;
  M128A Xmm14;
  M128A Xmm15;
};

/* 44 */
union _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB
{
  XMM_SAVE_AREA32 FltSave;
  struct
  {
    M128A Header[2];
    M128A Legacy[8];
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
  };
};

/* 42 */
struct __declspec(align(16)) _CONTEXT
{
  DWORD64 P1Home;
  DWORD64 P2Home;
  DWORD64 P3Home;
  DWORD64 P4Home;
  DWORD64 P5Home;
  DWORD64 P6Home;
  DWORD ContextFlags;
  DWORD MxCsr;
  WORD SegCs;
  WORD SegDs;
  WORD SegEs;
  WORD SegFs;
  WORD SegGs;
  WORD SegSs;
  DWORD EFlags;
  DWORD64 Dr0;
  DWORD64 Dr1;
  DWORD64 Dr2;
  DWORD64 Dr3;
  DWORD64 Dr6;
  DWORD64 Dr7;
  DWORD64 Rax;
  DWORD64 Rcx;
  DWORD64 Rdx;
  DWORD64 Rbx;
  DWORD64 Rsp;
  DWORD64 Rbp;
  DWORD64 Rsi;
  DWORD64 Rdi;
  DWORD64 R8;
  DWORD64 R9;
  DWORD64 R10;
  DWORD64 R11;
  DWORD64 R12;
  DWORD64 R13;
  DWORD64 R14;
  DWORD64 R15;
  DWORD64 Rip;
  union
  {
    XMM_SAVE_AREA32 FltSave;
    struct
    {
      M128A Header[2];
      M128A Legacy[8];
      M128A Xmm0;
      M128A Xmm1;
      M128A Xmm2;
      M128A Xmm3;
      M128A Xmm4;
      M128A Xmm5;
      M128A Xmm6;
      M128A Xmm7;
      M128A Xmm8;
      M128A Xmm9;
      M128A Xmm10;
      M128A Xmm11;
      M128A Xmm12;
      M128A Xmm13;
      M128A Xmm14;
      M128A Xmm15;
    };
  };
  M128A VectorRegister[26];
  DWORD64 VectorControl;
  DWORD64 DebugControl;
  DWORD64 LastBranchToRip;
  DWORD64 LastBranchFromRip;
  DWORD64 LastExceptionToRip;
  DWORD64 LastExceptionFromRip;
};

/* 54 */
typedef tagWNDCLASSW WNDCLASSW;

/* 57 */
typedef LONG_PTR LRESULT;

/* 56 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 58 */
typedef HINSTANCE__ *HINSTANCE;

/* 60 */
typedef HICON__ *HICON;

/* 62 */
typedef HICON HCURSOR;

/* 63 */
typedef HBRUSH__ *HBRUSH;

/* 65 */
typedef const WCHAR *LPCWSTR;

/* 55 */
struct tagWNDCLASSW
{
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCWSTR lpszMenuName;
  LPCWSTR lpszClassName;
};

/* 59 */
struct HINSTANCE__
{
  int unused;
};

/* 61 */
struct HICON__
{
  int unused;
};

/* 64 */
struct HBRUSH__
{
  int unused;
};

/* 66 */
typedef tagLOGFONTW LOGFONTW;

/* 67 */
struct tagLOGFONTW
{
  LONG lfHeight;
  LONG lfWidth;
  LONG lfEscapement;
  LONG lfOrientation;
  LONG lfWeight;
  BYTE lfItalic;
  BYTE lfUnderline;
  BYTE lfStrikeOut;
  BYTE lfCharSet;
  BYTE lfOutPrecision;
  BYTE lfClipPrecision;
  BYTE lfQuality;
  BYTE lfPitchAndFamily;
  WCHAR lfFaceName[32];
};

/* 68 */
#pragma pack(push, 4)
struct tagTEXTMETRICW
{
  LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  WCHAR tmFirstChar;
  WCHAR tmLastChar;
  WCHAR tmDefaultChar;
  WCHAR tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
};
#pragma pack(pop)

/* 69 */
struct tagSIZE
{
  LONG cx;
  LONG cy;
};

/* 70 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 72 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 71 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 73 */
typedef tagBITMAPINFO BITMAPINFO;

/* 76 */
struct tagBITMAPINFOHEADER
{
  DWORD biSize;
  LONG biWidth;
  LONG biHeight;
  WORD biPlanes;
  WORD biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG biXPelsPerMeter;
  LONG biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
};

/* 75 */
typedef tagBITMAPINFOHEADER BITMAPINFOHEADER;

/* 78 */
struct tagRGBQUAD
{
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
};

/* 77 */
typedef tagRGBQUAD RGBQUAD;

/* 74 */
struct tagBITMAPINFO
{
  BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors[1];
};

/* 79 */
typedef _ICONINFO ICONINFO;

/* 81 */
typedef int BOOL;

/* 82 */
typedef HBITMAP__ *HBITMAP;

/* 80 */
struct _ICONINFO
{
  BOOL fIcon;
  DWORD xHotspot;
  DWORD yHotspot;
  HBITMAP hbmMask;
  HBITMAP hbmColor;
};

/* 83 */
struct HBITMAP__
{
  int unused;
};

/* 84 */
struct _OSVERSIONINFOW
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  WCHAR szCSDVersion[128];
};

/* 85 */
typedef GUID KNOWNFOLDERID;

/* 87 */
typedef tagRECT RECT;

/* 86 */
struct tagMONITORINFO
{
  DWORD cbSize;
  RECT rcMonitor;
  RECT rcWork;
  DWORD dwFlags;
};

/* 88 */
typedef tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;

/* 89 */
struct tagPIXELFORMATDESCRIPTOR
{
  WORD nSize;
  WORD nVersion;
  DWORD dwFlags;
  BYTE iPixelType;
  BYTE cColorBits;
  BYTE cRedBits;
  BYTE cRedShift;
  BYTE cGreenBits;
  BYTE cGreenShift;
  BYTE cBlueBits;
  BYTE cBlueShift;
  BYTE cAlphaBits;
  BYTE cAlphaShift;
  BYTE cAccumBits;
  BYTE cAccumRedBits;
  BYTE cAccumGreenBits;
  BYTE cAccumBlueBits;
  BYTE cAccumAlphaBits;
  BYTE cDepthBits;
  BYTE cStencilBits;
  BYTE cAuxBuffers;
  BYTE iLayerType;
  BYTE bReserved;
  DWORD dwLayerMask;
  DWORD dwVisibleMask;
  DWORD dwDamageMask;
};

/* 91 */
typedef void *PVOID;

/* 93 */
typedef unsigned __int64 ULONG_PTR;

/* 92 */
typedef ULONG_PTR SIZE_T;

/* 90 */
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};

/* 96 */
typedef _M128A *PM128A;

/* 97 */
struct _KNONVOLATILE_CONTEXT_POINTERS::$D197E968A5E3A0101B09542845643980::$7E9A1EFC2FF768996EE7B23554CF4D70
{
  PM128A Xmm0;
  PM128A Xmm1;
  PM128A Xmm2;
  PM128A Xmm3;
  PM128A Xmm4;
  PM128A Xmm5;
  PM128A Xmm6;
  PM128A Xmm7;
  PM128A Xmm8;
  PM128A Xmm9;
  PM128A Xmm10;
  PM128A Xmm11;
  PM128A Xmm12;
  PM128A Xmm13;
  PM128A Xmm14;
  PM128A Xmm15;
};

/* 95 */
union _KNONVOLATILE_CONTEXT_POINTERS::$D197E968A5E3A0101B09542845643980
{
  PM128A FloatingContext[16];
  struct
  {
    PM128A Xmm0;
    PM128A Xmm1;
    PM128A Xmm2;
    PM128A Xmm3;
    PM128A Xmm4;
    PM128A Xmm5;
    PM128A Xmm6;
    PM128A Xmm7;
    PM128A Xmm8;
    PM128A Xmm9;
    PM128A Xmm10;
    PM128A Xmm11;
    PM128A Xmm12;
    PM128A Xmm13;
    PM128A Xmm14;
    PM128A Xmm15;
  };
};

/* 99 */
typedef unsigned __int64 *PDWORD64;

/* 100 */
struct _KNONVOLATILE_CONTEXT_POINTERS::$CBEADB5154BB5C8C472F1A275CEC8722::$9DB6FE850DED2261D561D3CAAB646039
{
  PDWORD64 Rax;
  PDWORD64 Rcx;
  PDWORD64 Rdx;
  PDWORD64 Rbx;
  PDWORD64 Rsp;
  PDWORD64 Rbp;
  PDWORD64 Rsi;
  PDWORD64 Rdi;
  PDWORD64 R8;
  PDWORD64 R9;
  PDWORD64 R10;
  PDWORD64 R11;
  PDWORD64 R12;
  PDWORD64 R13;
  PDWORD64 R14;
  PDWORD64 R15;
};

/* 98 */
union _KNONVOLATILE_CONTEXT_POINTERS::$CBEADB5154BB5C8C472F1A275CEC8722
{
  PDWORD64 IntegerContext[16];
  struct
  {
    PDWORD64 Rax;
    PDWORD64 Rcx;
    PDWORD64 Rdx;
    PDWORD64 Rbx;
    PDWORD64 Rsp;
    PDWORD64 Rbp;
    PDWORD64 Rsi;
    PDWORD64 Rdi;
    PDWORD64 R8;
    PDWORD64 R9;
    PDWORD64 R10;
    PDWORD64 R11;
    PDWORD64 R12;
    PDWORD64 R13;
    PDWORD64 R14;
    PDWORD64 R15;
  };
};

/* 94 */
struct _KNONVOLATILE_CONTEXT_POINTERS
{
  union
  {
    PM128A FloatingContext[16];
    struct
    {
      PM128A Xmm0;
      PM128A Xmm1;
      PM128A Xmm2;
      PM128A Xmm3;
      PM128A Xmm4;
      PM128A Xmm5;
      PM128A Xmm6;
      PM128A Xmm7;
      PM128A Xmm8;
      PM128A Xmm9;
      PM128A Xmm10;
      PM128A Xmm11;
      PM128A Xmm12;
      PM128A Xmm13;
      PM128A Xmm14;
      PM128A Xmm15;
    };
  };
  union
  {
    PDWORD64 IntegerContext[16];
    struct
    {
      PDWORD64 Rax;
      PDWORD64 Rcx;
      PDWORD64 Rdx;
      PDWORD64 Rbx;
      PDWORD64 Rsp;
      PDWORD64 Rbp;
      PDWORD64 Rsi;
      PDWORD64 Rdi;
      PDWORD64 R8;
      PDWORD64 R9;
      PDWORD64 R10;
      PDWORD64 R11;
      PDWORD64 R12;
      PDWORD64 R13;
      PDWORD64 R14;
      PDWORD64 R15;
    };
  };
};

/* 102 */
typedef HDC__ *HDC;

/* 101 */
struct tagPAINTSTRUCT
{
  HDC hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
};

/* 103 */
struct HDC__
{
  int unused;
};

/* 105 */
typedef USHORT ADDRESS_FAMILY;

/* 106 */
typedef char CHAR;

/* 104 */
struct sockaddr
{
  ADDRESS_FAMILY sa_family;
  CHAR sa_data[14];
};

/* 107 */
struct WSAData
{
  WORD wVersion;
  WORD wHighVersion;
  unsigned __int16 iMaxSockets;
  unsigned __int16 iMaxUdpDg;
  char *lpVendorInfo;
  char szDescription[257];
  char szSystemStatus[129];
};

/* 111 */
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY *PRUNTIME_FUNCTION;

/* 110 */
struct _UNWIND_HISTORY_TABLE_ENTRY
{
  DWORD64 ImageBase;
  PRUNTIME_FUNCTION FunctionEntry;
};

/* 109 */
typedef _UNWIND_HISTORY_TABLE_ENTRY UNWIND_HISTORY_TABLE_ENTRY;

/* 108 */
struct _UNWIND_HISTORY_TABLE
{
  DWORD Count;
  BYTE LocalHint;
  BYTE GlobalHint;
  BYTE Search;
  BYTE Once;
  DWORD64 LowAddress;
  DWORD64 HighAddress;
  UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};

/* 113 */
#pragma pack(push, 4)
union _IMAGE_RUNTIME_FUNCTION_ENTRY::$1FC7DDE9AB0EB2C3B18F286E3EAA9FDE
{
  DWORD UnwindInfoAddress;
  DWORD UnwindData;
};
#pragma pack(pop)

/* 112 */
#pragma pack(push, 4)
struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  DWORD BeginAddress;
  DWORD EndAddress;
  #pragma pack(push, 4)
  union
  {
    DWORD UnwindInfoAddress;
    DWORD UnwindData;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 114 */
#pragma pack(push, 8)
struct _IMAGEHLP_SYMBOL64
{
  DWORD SizeOfStruct;
  DWORD64 Address;
  DWORD Size;
  DWORD Flags;
  DWORD MaxNameLength;
  CHAR Name[1];
};
#pragma pack(pop)

/* 116 */
typedef CHAR *PCHAR;

/* 115 */
#pragma pack(push, 8)
struct _IMAGEHLP_LINE64
{
  DWORD SizeOfStruct;
  PVOID Key;
  DWORD LineNumber;
  PCHAR FileName;
  DWORD64 Address;
};
#pragma pack(pop)

/* 117 */
struct _WIN32_FIND_DATAW
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  WCHAR cFileName[260];
  WCHAR cAlternateFileName[14];
};

/* 120 */
struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 119 */
union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F
{
  DWORD dwOemId;
  struct
  {
    WORD wProcessorArchitecture;
    WORD wReserved;
  };
};

/* 121 */
typedef void *LPVOID;

/* 122 */
typedef ULONG_PTR DWORD_PTR;

/* 118 */
struct _SYSTEM_INFO
{
  union
  {
    DWORD dwOemId;
    struct
    {
      WORD wProcessorArchitecture;
      WORD wReserved;
    };
  };
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 124 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 128 */
typedef void *HANDLE;

/* 123 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 127 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 126 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 125 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD CreatorBackTraceIndexHigh;
  WORD SpareWORD;
};

/* 131 */
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 130 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 133 */
typedef _CONTEXT *PCONTEXT;

/* 129 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 132 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
};

/* 135 */
typedef WCHAR *LPWSTR;

/* 136 */
typedef BYTE *LPBYTE;

/* 134 */
struct _STARTUPINFOW
{
  DWORD cb;
  LPWSTR lpReserved;
  LPWSTR lpDesktop;
  LPWSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 138 */
struct _SLIST_HEADER::$2AAD3A9E0F86A5BF9BE50654CA710F62
{
  ULONGLONG Alignment;
  ULONGLONG Region;
};

/* 139 */
struct _SLIST_HEADER::$F9F9EB832D628D73E611400623F67F2B
{
  unsigned __int64 Depth : 16;
  unsigned __int64 Sequence : 48;
  unsigned __int64 Reserved : 4;
  unsigned __int64 NextEntry : 60;
};

/* 137 */
union __declspec(align(16)) _SLIST_HEADER
{
  struct
  {
    ULONGLONG Alignment;
    ULONGLONG Region;
  };
  _SLIST_HEADER::$F9F9EB832D628D73E611400623F67F2B HeaderX64;
};

/* 140 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 141 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 143 */
typedef _SYSTEMTIME SYSTEMTIME;

/* 142 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 146 */
struct _OVERLAPPED::$742A73540840F318F86F9CEE3D494648::$9BFE693EDA487769FDABADE5E43394F7
{
  DWORD Offset;
  DWORD OffsetHigh;
};

/* 145 */
union _OVERLAPPED::$742A73540840F318F86F9CEE3D494648
{
  struct
  {
    DWORD Offset;
    DWORD OffsetHigh;
  };
  PVOID Pointer;
};

/* 144 */
struct _OVERLAPPED
{
  ULONG_PTR Internal;
  ULONG_PTR InternalHigh;
  union
  {
    struct
    {
      DWORD Offset;
      DWORD OffsetHigh;
    };
    PVOID Pointer;
  };
  HANDLE hEvent;
};

/* 147 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 149 */
typedef $442A5DF3ADBDBBE6D50BB06724F3065D _Thrd_imp_t;

/* 148 */
typedef _Thrd_imp_t _Thrd_t;

/* 151 */
typedef unsigned int _Thrd_id_t;

/* 150 */
struct $442A5DF3ADBDBBE6D50BB06724F3065D
{
  void *_Hnd;
  _Thrd_id_t _Id;
};

/* 153 */
typedef __int64 __time64_t;

/* 152 */
struct xtime
{
  __time64_t sec;
  int nsec;
};

/* 154 */
struct _Ctypevec
{
  unsigned int _Page;
  const __int16 *_Table;
  int _Delfl;
  wchar_t *_LocaleName;
};

/* 155 */
struct _Cvtvec
{
  unsigned int _Page;
  unsigned int _Mbcurmax;
  int _Isclocale;
  unsigned __int8 _Isleadbyte[32];
};

/* 157 */
typedef const _s_ThrowInfo ThrowInfo;

/* 156 */
typedef ThrowInfo _ThrowInfo;

/* 159 */
typedef int PMFN;

/* 158 */
#pragma pack(push, 4)
struct _s_ThrowInfo
{
  unsigned int attributes;
  PMFN pmfnUnwind;
  int pForwardCompat;
  int pCatchableTypeArray;
};
#pragma pack(pop)

/* 160 */
#pragma pack(push, 8)
struct __crt_locale_pointers
{
  struct __crt_locale_data *locinfo;
  struct __crt_multibyte_data *mbcinfo;
};
#pragma pack(pop)

/* 162 */
typedef void (__cdecl *_PVFV)();

/* 161 */
#pragma pack(push, 8)
struct _onexit_table_t
{
  _PVFV *_first;
  _PVFV *_last;
  _PVFV *_end;
};
#pragma pack(pop)

/* 163 */
#pragma pack(push, 8)
struct fenv_t
{
  unsigned int _Fe_ctl;
  unsigned int _Fe_stat;
};
#pragma pack(pop)

/* 164 */
struct C_SCOPE_TABLE
{
  void *__ptr32 Begin;
  void *__ptr32 End;
  void *__ptr32 Handler;
  void *__ptr32 Target;
};

/* 165 */
struct _LocaleUpdate;

/* 166 */
struct std::error_category;

/* 167 */
struct std::future_error;

/* 168 */
struct charNode;

/* 169 */
struct Concurrency::details::_Condition_variable;

/* 170 */
struct std::ios_base;

/* 171 */
struct std::locale::facet;

/* 172 */
struct __FrameHandler3::TryBlockMap;

/* 173 */
struct Concurrency::critical_section;

/* 174 */
struct std::bad_function_call;

/* 175 */
struct std::_Lockit;

/* 176 */
struct Concurrency::details::GlobalCore;

/* 177 */
struct Concurrency::details::platform;

/* 178 */
struct FH4;

/* 179 */
struct FH4::TryBlockMap4;

/* 180 */
struct FH4::UWMap4;

/* 181 */
struct _lambda_9a32fed5bf61b6b509b2d3f6003082a1_;

/* 182 */
struct __crt_stdio_stream;

/* 183 */
struct std::regex_error;

/* 184 */
struct std::exception_ptr;

/* 185 */
struct _anonymous_namespace_;

/* 186 */
struct _anonymous_namespace_::_ExceptionPtr_normal;

/* 187 */
struct std::_Init_locks;

/* 188 */
struct std::locale::_Locimp;

/* 189 */
struct FH4::HandlerMap4;

/* 190 */
struct std::nothrow_t;

/* 191 */
struct Concurrency::details;

